import pandas as pd
from sklearn.model_selection import train_test_split

# Load data
titanic = pd.read_csv('titanic.csv')

# Split data into response and feature dataframes
y = titanic['Survived']
X = titanic.drop(['Survived'], axis=1)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Initialize decision tree classifier
dt = DecisionTreeClassifier()

# Fit the training data to the model
dt.fit(X_train, y_train)

# Generate predictions on test data
y_pred = dt.predict(X_test)

# Evaluate model performance
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print("Accuracy score: ", accuracy)
print("Confusion matrix: \n", conf_matrix)
print("Classification report: \n", class_report)


# Following the model's evaluation, we discovered that the decision tree classifier provided us with an accuracy of 0.80, meaning that the model correctly 
# predicted the survival status of 80% of the passengers. The precision and recall of our model were 0.77 and 0.71, respectively, indicating moderate accuracy.
# As a result, we were successful in creating a decision tree classifier to forecast passenger survivability based on the Titanic dataset's provided attributes. 
# The model can be used to forecast whether new passengers will survive.
